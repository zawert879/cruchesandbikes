{"version":3,"sources":["../../src/index.js"],"names":["request","require","accuweather","API_KEY","baseUrl","queryLocations","params","url","qs","apikey","q","query","json","then","resp","catch","console","error","err","getFirstLocationKey","body","Key","undefined","getGeoLocation","lat","long","queryString","toString","getCurrentConditions","options","Array","isArray","TypeError","unit","locationKey","isNaN","Promise","resolve","parseInt","key","reject","details","Summary","WeatherText","Temperature","Imperial","Value","RealFeel","RealFeelTemperature","Precipitation","Precip1hr","Metric","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const request = require('request-promise')\n\nconst accuweather = () => {\n  return (API_KEY) => {\n    const baseUrl = 'http://dataservice.accuweather.com'\n\n    // Queries all location keys based on keyword search\n    const queryLocations = query => {\n      const params = {\n        url: baseUrl + '/locations/v1/cities/autocomplete',\n        qs: {apikey: API_KEY, q: query},\n        json: true\n      }\n      return request(params)\n        .then(resp => resp)\n        .catch(err => console.error(err))\n    }\n\n    // Gets the first result for AccuWeather-specific location keys so that a query can be made to get the weather\n    const getFirstLocationKey = query => queryLocations(query)\n        .then(([body,]) => body ? body.Key : undefined)\n        .catch(err => console.error(err))\n\n    // Gets location key from object containing { lat: Number, long: Number }\n    const getGeoLocation = ({lat, long}) => {\n      const queryString = lat.toString() + ', ' + long.toString()\n      const params = {\n        url: baseUrl + '/locations/v1/cities/geoposition/search',\n        qs: {apikey: API_KEY, q: queryString},\n        json: true\n      }\n      return request(params)\n        .then(resp => resp.Key)\n        .catch(err => console.error(err))\n    }\n\n    /*\n    Takes string of keyword, string/number of location key,\n    or object containing {lat: Number, long: Number}\n     */\n    const getCurrentConditions = (query, options) => {\n      if ((typeof query !== 'string' && typeof query !== 'number' && typeof query !== 'object')\n        || Array.isArray(query)) {\n        throw new TypeError('Query argument should be string, number, or object, instead received ' + typeof query)\n      }\n\n      const unit = options ? options.unit : \"Farenheit\"\n      // If query is a string, then do a keyword search and return the most relevant result's location key.\n      // If query is a number (it is the location Key) then use that key\n      const locationKey = typeof query === 'object' ? getGeoLocation(query) :\n                          isNaN(query) ? getFirstLocationKey(query) : Promise.resolve(parseInt(query))\n      return locationKey\n        .then(key => key ? key : Promise.reject('No result found for query'))\n        .then(key => {\n          const params = {\n            url: baseUrl + '/currentconditions/v1/' + key,\n            qs: {apikey: API_KEY, details: true},\n            json: true\n          }\n          return request(params)\n        })\n        .then(([body,]) => {\n          if (unit == \"Farenheit\") {\n            return {\n              Summary: body.WeatherText,\n              Temperature: body.Temperature.Imperial.Value,\n              RealFeel: body.RealFeelTemperature.Imperial.Value,\n              Precipitation: body.Precip1hr.Imperial\n            }\n          } else {\n            return {\n              Summary: body.WeatherText,\n              Temperature: body.Temperature.Metric.Value,\n              RealFeel: body.RealFeelTemperature.Metric.Value,\n              Precipitation: body.Precip1hr.Metric\n            }\n          }\n        })\n        .catch(err => console.error(err))\n    }\n\n    return {\n      queryLocations,\n      getCurrentConditions\n    }\n  }\n}\n\nmodule.exports = accuweather"]}